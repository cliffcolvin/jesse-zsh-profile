alias updategitaliases='cp ~/.aliases /tmp/.aliases-"`date +"%d-%m-%Y-%H-%M-%S"`" & wget https://raw.githubusercontent.com/jessegoodier/jesse-zsh-profile/main/.aliases -O ~/.aliases && omz reload'
unalias ksd 2>/dev/null

# vscode on wsl (add this to disable using the windows path)
if [ -f /proc/sys/fs/binfmt_misc/WSLInterop ]; then
 alias code='/mnt/c/Program\ Files/Microsoft\ VS\ Code/Code.exe'
fi

# aliases
alias ll='ls -lah'
alias h='history'
alias kg='kubectl get'
alias kgnol='kubectl get nodes --show-labels'
alias kgep='kubectl get ep'
alias kd='kubectl describe'
alias kests='kubectl edit sts'
alias kdpi='kubectl describe pod|ag image:'
alias krrd='kubectl rollout restart deployment'
alias krrsts='kubectl rollout restart sts'

# kubecost
alias klcm="kubectl logs -l app=cost-analyzer --tail=-1 -c cost-model"
alias klfe="kubectl logs -l app=cost-analyzer --tail=-1 -c cost-analyzer-frontend"
alias kla="kubectl logs -l app=aggregator -c aggregator --tail=-1"
alias klcmf="kubectl logs -l app=cost-analyzer -c cost-model --tail=-1 --follow"
alias klfef="kubectl logs -l app=cost-analyzer -c cost-analyzer-frontend --tail=-1 --follow"
alias klaf="kubectl logs -l app=aggregator -c aggregator --tail=-1 --follow"

# todo function to find the deployment
alias kexecfe="kubectl exec -i -t deployment/kubecost-cost-analyzer -c cost-analyzer-frontend --" $1
alias kexeccm="kubectl exec -i -t deployment/kubecost-cost-analyzer -c cost-model --" $1

# clean up images not currently be used
alias drmi='docker rmi -f $(docker images -q)'
alias deit='docker exec -i -t'

# azure
alias azl='az aks list --output table'

# aws
alias eks='eksctl get cluster'


# randoms
alias c='clear'
alias cat='ccat'
# Stop after sending count ECHO_REQUEST packets #
alias ping='ping -c 5'
# Do not wait interval 1 second, go fast #
alias fastping='ping -c 100 -s.2'
alias svi='sudo vi'
## pass options to free ##
alias meminfo='free -m -l -t'

## get top process eating memory
alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'

## get top process eating cpu ##
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'

## Get server cpu info ##
alias cpuinfo='lscpu'
alias df='df -H'
alias du='du -sk * | sort -n | while read size fname; do for unit in k M G T P E Z Y; do if [ $size -lt 1024 ]; then echo -e "${size}${unit}\t${fname}"; break; fi; size=$((size/1024)); done; done'

if [ "$(command -v exa)" ]; then
    alias ll='exa -l --color always --icons -a -s type'
    alias l='exa --color always --icons -a -s type'
    alias la='exa -l --color always --icons -a -s type'
    alias ls='exa -G  --color auto --icons -a -s type'
fi

alias grep='grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox,.vscode-server-insiders,.vscode-server,.vscode-server-insiders,.vs-kubernetes}'
alias ack='ack --color --ignore-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox,.vscode-server-insiders,.vscode-server,.vscode-server-insiders,.vs-kubernetes}'

# more kube
alias kg='kubectl get'
alias kgpv='kubectl get pv'
alias kgpvw='kubectl get pv --watch'
alias kgpaw='kubectl get pods --all-namespaces --watch'
alias kgpw='kubectl get pods --watch'
alias kn='kubectl config set-context --current --namespace'
alias kc='kubectl config use-context'
if [ "$(command -v kubectx)" ]; then
  alias kn='kubens'
  alias kx='kubectx'
fi

alais kgsts="kubectl get sts"
alias kge="kubectl get events --sort-by=lastTimestamp --field-selector type!=Normal"
alias keit='kubectl exec -i -t'
alias kic="keit -n nginx-ingress \$(kgpn nginx-ingress|grep ingress -m1 |awk '{print \$1}') -- nginx -T | grep '\\S'"
[ -x "$(command -v crossplane)" ] && alias kic="echo \$(keit -n nginx-ingress \$(kgpn nginx-ingress|grep ingress -m1 |awk '{print \$1}') -- nginx -T) |crossplane format /dev/stdin"

# AWS
alias acreds='aws eks update-kubeconfig --region ca-central-1 --name'
# gcloud
# create a cluster
alias gccc='gcloud container clusters create --machine-type e2-standard-4 --num-nodes=1 --zone=us-east1-d --network=creynold-vpc'
# get kube creds for a cluster: gcreds jesse-gk1
gcreds() { ZONE=$(gcloud container clusters list --filter=name:"$1" --format="[no-heading](location)") ; gcloud container clusters get-credentials $1 --zone $ZONE }
#delete a cluster
gccd() { ZONE=$(gcloud container clusters list --filter=name:"$1" --format="[no-heading](location)") ; gcloud container clusters delete $1 --zone $ZONE $2 }
# list all clusters in our project, ignore cluster upgrade and surveys
alias gccl='gcloud container clusters list 2>/dev/null'
alias gcclj='gcloud container clusters list 2>/dev/null --filter=name:jesse --format="(name,location,currentNodeCount)"'
# resize cluster
gccr() { ZONE=$(gcloud container clusters list --filter=name:"$1" --format="[no-heading](location)") ; gcloud container clusters resize $1 --zone $ZONE --num-nodes $2 --quiet}
alias gcdu='gcloud dns record-sets update --type=A --ttl=30 --zone=nginx-rocks --rrdatas'
alias gccil'=gcloud compute instances list |grep jesse'
alias gil'=gcloud compute instances list |grep jesse'


k-get-all-images() {# Loop through each context
for context in $contexts; do
    echo "Context: $context"
    kubectl config use-context $context

    namespaces=$(kubectl get namespaces -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')

    # Loop through each namespace and print the image name of each pod
    for namespace in $namespaces; do

        # Get all pods in the current namespace
        pods=$(kubectl get pods -n $namespace -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')

        # Loop through each pod and print its image name
        for pod in $pods; do
            image=$(kubectl get pod $pod -n $namespace -o jsonpath='{.spec.containers[*].image}')
            echo "Context: $context, Namespace: $namespace, Pod: $pod, Image: $image"
        done

    done
done }

k-remove-bad-contexts() { # remove dead contexts
cp ~/.kube/config ./kubeconfig-"`date +"%d-%m-%Y-%H-%M-%S"`"
contexts=$(kubectl config get-contexts -o name)

# Loop through each context
for context in $contexts; do
    echo "Context: $context"
    kubectl config use-context $context

    # Check if the context is working
    if kubectl get pods &> /dev/null; then
        echo "Context $context is working"
    else
        echo "Context $context is not working"
        kubectl config delete-context $context
        echo "--------------Context $context has been removed------------------"
    fi

    echo ""
done }
